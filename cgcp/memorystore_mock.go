// Code generated by MockGen. DO NOT EDIT.
// Source: cgcp/memorystore.go

// Package cgcp is a generated GoMock package.
package cgcp

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMemoryStoreClient is a mock of MemoryStoreClient interface
type MockMemoryStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockMemoryStoreClientMockRecorder
}

// MockMemoryStoreClientMockRecorder is the mock recorder for MockMemoryStoreClient
type MockMemoryStoreClientMockRecorder struct {
	mock *MockMemoryStoreClient
}

// NewMockMemoryStoreClient creates a new mock instance
func NewMockMemoryStoreClient(ctrl *gomock.Controller) *MockMemoryStoreClient {
	mock := &MockMemoryStoreClient{ctrl: ctrl}
	mock.recorder = &MockMemoryStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemoryStoreClient) EXPECT() *MockMemoryStoreClientMockRecorder {
	return m.recorder
}

// GetJSON mocks base method
func (m *MockMemoryStoreClient) GetJSON(ctx context.Context, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJSON", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJSON indicates an expected call of GetJSON
func (mr *MockMemoryStoreClientMockRecorder) GetJSON(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJSON", reflect.TypeOf((*MockMemoryStoreClient)(nil).GetJSON), ctx, key, value)
}

// SetJSON mocks base method
func (m *MockMemoryStoreClient) SetJSON(ctx context.Context, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJSON", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJSON indicates an expected call of SetJSON
func (mr *MockMemoryStoreClientMockRecorder) SetJSON(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJSON", reflect.TypeOf((*MockMemoryStoreClient)(nil).SetJSON), ctx, key, value)
}

// Delete mocks base method
func (m *MockMemoryStoreClient) Delete(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMemoryStoreClientMockRecorder) Delete(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemoryStoreClient)(nil).Delete), varargs...)
}

// Close mocks base method
func (m *MockMemoryStoreClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockMemoryStoreClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMemoryStoreClient)(nil).Close))
}

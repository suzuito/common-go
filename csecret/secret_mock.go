// Code generated by MockGen. DO NOT EDIT.
// Source: csecret/secret.go

// Package csecret is a generated GoMock package.
package csecret

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretClient is a mock of SecretClient interface.
type MockSecretClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretClientMockRecorder
}

// MockSecretClientMockRecorder is the mock recorder for MockSecretClient.
type MockSecretClientMockRecorder struct {
	mock *MockSecretClient
}

// NewMockSecretClient creates a new mock instance.
func NewMockSecretClient(ctrl *gomock.Controller) *MockSecretClient {
	mock := &MockSecretClient{ctrl: ctrl}
	mock.recorder = &MockSecretClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretClient) EXPECT() *MockSecretClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSecretClient) Get(ctx context.Context, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretClientMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretClient)(nil).Get), ctx, name)
}

// GetString mocks base method.
func (m *MockSecretClient) GetString(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockSecretClientMockRecorder) GetString(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockSecretClient)(nil).GetString), ctx, name)
}

// ReplaceAllEnvs mocks base method.
func (m *MockSecretClient) ReplaceAllEnvs(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAllEnvs", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceAllEnvs indicates an expected call of ReplaceAllEnvs.
func (mr *MockSecretClientMockRecorder) ReplaceAllEnvs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAllEnvs", reflect.TypeOf((*MockSecretClient)(nil).ReplaceAllEnvs), ctx)
}

// ReplaceEnv mocks base method.
func (m *MockSecretClient) ReplaceEnv(ctx context.Context, ekey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceEnv", ctx, ekey)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceEnv indicates an expected call of ReplaceEnv.
func (mr *MockSecretClientMockRecorder) ReplaceEnv(ctx, ekey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceEnv", reflect.TypeOf((*MockSecretClient)(nil).ReplaceEnv), ctx, ekey)
}
